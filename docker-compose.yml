services:
  client-backend:
    image: client:0.0.12
    container_name: broken-store-client-backend
    build:
      context: .
      dockerfile: ./backend.dockerfile
    ports:
      - "8085:8080"
    depends_on:
      - service-db
    environment:
      - SERVER_PORT=8080
      - SPRING_DATASOURCE_URL=jdbc:postgresql://service-db/broken_store
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME:-admin}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD:-admin}
      #      - SPRING_JPA_DATABASE=postgresql
      #      - SPRING_JPA_HIBERNATE_DDL-AUTO=update
      # - SPRING_JPA_HIBERNATE_DDL_AUTO=update # Careful! 'create' destroy data! https://stackoverflow.com/questions/21113154/spring boot-ddl-auto-generator
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create # Careful! 'create' destroy data! https://stackoverflow.com/questions/21113154/spring-
      - MINIO_URL=minio
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 512M

  service-db:
    image: postgres:14.7-alpine
    container_name: broken-store-postgres-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin}
      POSTGRES_DB: broken_store
    ports:
      - "15432:5432"
    volumes:
      #      - ./db/create_db.sql:/docker-entrypoint-initdb.d/create_db.sql
      - db-data:/var/lib/postgresql/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 512M

  ##  pgadmin:
  ##    container_name: pgadmin4_container
  ##    image: dpage/pgadmin4:7
  ##    restart: always
  ##    environment:
  ##      PGADMIN_DEFAULT_EMAIL: admin@admin.com
  ##      PGADMIN_DEFAULT_PASSWORD: root
  ##    ports:
  ##      - "5050:80"
  ##    volumes:
  ##      - pgadmin-data:/var/lib/pgadmin

  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: broken-store-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9090"]
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 512M

  grafana:
    image: grafana/grafana:9.5.15
    container_name: broken-store-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/main.yaml
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3000"]
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 512M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: broken-store-cadvisor-exporter
    privileged: true
    ports:
      - 8081:8081
    volumes:
      - /:/rootfs:ro
      #      - /var/run:/var/run:rw
      - /var/run/docker.sock:/var/run/docker.sock:rw # mac
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    command:
      - "-port=8081"
    depends_on:
      - client-backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  minio:
    image: minio/minio:latest
    container_name: broken-store-minio
    restart: unless-stopped
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio_admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio_admin}
    volumes:
      - minio-data:/data
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    #   interval: 30s
    #   timeout: 20s
    #   retries: 3

  minio-settings:
    image: minio/mc
    depends_on:
      - minio
    environment:
      - MINIO_ROOT_USER1=minio_admin
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minio_admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minio_admin}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-Up4pXyWiCdaffrEEyDqJ}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-7mq8E2uk3kNR2AkgqapfC4kU5j7bTiFKtV1JllU8}
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc config host add myminio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;
      /usr/bin/mc admin accesskey create myminio/ minio_admin --access-key $$MINIO_ACCESS_KEY --secret-key $$MINIO_SECRET_KEY;
      exit 0;
      "

  keycloak:
    container_name: broken-store-keycloak
    image: quay.io/keycloak/keycloak:26.1.1
    command:
      -v start-dev --import-realm
    ports:
      - 8082:8080
    volumes:
      - ./keycloak/:/opt/keycloak/data/import
    #  - ./h2:/opt/keycloak/data/h2
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_USERNAME:-admin}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_PASSWORD:-admin}
      KC_HTTP_PORT: 8080
      KC_HOSTNAME_URL: http://localhost:8080
      KC_HOSTNAME_ADMIN_URL: http://localhost:8080
      KC_HOSTNAME_STRICT_BACKCHANNEL: true
      KC_HTTP_RELATIVE_PATH: /
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ['CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/auth/health/live']
      interval: 5s
      timeout: 5s
      retries: 20

volumes:
  db-data:
  minio-data:
#  pgadmin-data:
